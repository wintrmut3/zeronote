[{"C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\index.js":"1","C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\App.js":"2","C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\LatexRenderer.js":"3","C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\Viewer.js":"4","C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\Box.js":"5"},{"size":230,"mtime":1612128189288,"results":"6","hashOfConfig":"7"},{"size":11786,"mtime":1612884055121,"results":"8","hashOfConfig":"7"},{"size":177,"mtime":1612579277932,"results":"9","hashOfConfig":"7"},{"size":305,"mtime":1612128197868,"results":"10","hashOfConfig":"7"},{"size":3085,"mtime":1614637828454,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"a4crvi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\index.js",[],["24","25"],"C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\App.js",["26","27","28","29","30"],"import { useEffect, useState, useMemo } from 'react';\nimport './App.css';\nimport Viewer from './Viewer';\nimport { Helmet } from 'react-helmet';\nimport Box from './Box';\nimport html2canvas from 'html2canvas';\nimport ls from 'local-storage'\nimport Download from '@axetroy/react-download';\n// import { Page, Text, View, Document, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';\n\n\n//box data template\nclass BoxData {\n    constructor(title, content, boxtype) {\n        this.title = title;\n        this.content = content;\n        this.boxtype = boxtype;\n    }\n}\n\nfunction App() {\n    //loadsave\n    const readme = \"# Welcome to Astronote! \\nAstronote is a barebones, studysheet generator with markdown-like syntax. \\n Go fullscreen for the best experience (F11) \\nCreate a section header with #[space]<Your header here> and then add content below.\\nLaTeX input is supported, on a single line with $<LaTeX equation here>$.\\nEnjoy one of Maxwell's Equations\\n$B'=-\\\\nabla \\\\times E$ \\n Click the footer text on the left to review this readme\\n# Exporting \\nHit the preview > export buttons to open the image in a new tab, then Ctrl+P to print. Modfy printing settings at will to fit and print to PDF.\\nAll data is autosaved to your browser.\\nDownload raw to get a text-version of your editor input to be safe.\\n# Warnings \\n+ I have only tested this in Chrome\\n+ You can't undo after previewing and coming back to editor \\n+ Some of the styling is buggy \\n+ Data is stored on localStorage which is pretty safe, but go to editor>download-raw to save a copy locally\\n+ this copy is normal text, and can be opened with notepad\\n Example TeX note for a signals midterm is in the next box\\n# Complex Exponential Sin/Cos\\n$$sin(t) = Re(z(t)) = e^{j \\\\omega t} +e^{-j \\\\omega t}/2$$\\n$$cos(t) = Im(z(t)) = e^{j \\\\omega t} -e^{-j\\\\omega t}/2j$$\\n+ Knowing how to symbolically manipulate this, both forward and backwards, is very helpful\\n\"\n\n    let savednotes = ls.get('saved-notes');\n    if (savednotes == null) savednotes = readme;\n\n    //intializers\n    const [content, setContent] = useState(savednotes);\n    const [showOutput, setShowOutput] = useState(true);\n    const [output, setOutput] = useState([]);\n    const [numCols, setNumCols] = useState(4);\n    const [isZenMode, setZenMode] = useState(true);\n    const [fontStyle, setFontStyle] = useState(0);\n    const [fontSize, setFontSize] = useState(1);\n\n    //regex tags\n\n    const ParseContent = (event) => {\n        setContent(event.target.value);\n\n    }\n\n\n    useEffect(() => {\n        ls.get('saved-notes');\n\n    }, []);\n\n\n    //boxPacking\n    useEffect(() => {\n        BoxPacker();\n        ls.set('saved-notes', content);\n        console.log(content.replace(/\\n/g, '\\\\n'))\n    }, [content])\n\n    const FlipShowOutput = () => {\n        setShowOutput(!showOutput);\n    }\n\n    //this takes in the code and subdivides it into \"boxes\"\n    const BoxPacker = () => {\n        var splitContent = content.split('\\n');\n\n        var boxData = new BoxData(\"\", [], \"\");\n        var BoxDataArray = []; //array of logic box elements\n        var BoxOutputArray = []; //array of Box Components\n\n        //develop boxes object array, extracting out metadata\n\n        splitContent.forEach(element => {\n            if (element.includes(\"# \")) {\n                //write and push the last boxdata\n                if (boxData.title !== \"\") { BoxDataArray.push(boxData); } //push to output array if not null\n\n                boxData = new BoxData(\"\", [], \"\"); //reset\n                //start the new boxData\n                boxData.title = element.slice(2); //after the #_\n            }\n            else {\n                boxData.content.push(element);\n            }\n        });\n        //also just push the last element\n        if (boxData.title !== \"\") { BoxDataArray.push(boxData); } //push to output array if not null\n\n        //data objects are created correctly!\n\n        //create the boxes themselves from the data objects and add to the final box array \n        //iterate through the box data\n        BoxDataArray.forEach(element => {\n            //extracting out the content array from each box\n            var content = element.content;\n\n            // console.log(element.title + \" Box Shipped\")\n            // console.log(\"Box Contents: --- \")\n            // console.log(content);\n            // console.log(\"---\")\n\n            BoxOutputArray.push(\n                < Box\n                    title={element.title} //title of the box\n                    content={content} //array of strings\n                    boxtype=\"normalbox\" // type of box (definition, equation, algorithm)\n                />\n            );\n        }); //end per box\n\n        setOutput(BoxOutputArray); // the final array of populated Box Components\n    }//end box data packer function\n\n    //opens image in new tab - can't do this with the simple window.open anymore due to chrome deprec so use iframe instead\n    const RenderImage = () => {\n        const div = document.getElementById(\"boxes-wrapper\");\n\n        html2canvas(div,  {\n            windowWidth: div.scrollWidth,\n            windowHeight: div.scrollHeight\n        }).then(function (canvas) {\n            // const base64image = canvas.toDataURL(\"png\");\n            // var iframe = \"<iframe width='100%' height='100%' src='\" + base64image + \"'></iframe>\"\n            // var data = div.outerHTML;\n            // var x = window.open();\n            // x.document.open();\n            // x.document.write(iframe);\n            // x.document.close();\n            document\n                .appendChild(canvas);\n        });\n\n    }\n\n    const RenderTab = () => {\n        var wi = window.open('', 'printwindow');\n\n\n        var data = document.getElementById(\"boxes-wrapper\").outerHTML;\n\n        var texHead = '<link href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" rel = \"stylesheet\"/> <link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100&family=Space+Mono&family=Syne&display=swap\" rel=\"stylesheet\" />'\n        var styles = '<link rel=\"stylesheet\" type=\"text/css\" href=\"ExportStyles.css\">'\n        wi.document.write('<html><head>')\n        wi.document.write(texHead + styles)\n        wi.document.write('</head>')\n        wi.document.write('<body>')\n        wi.document.write(data)\n        wi.document.write('</body></html>')\n        wi.document.close();\n    }\n\n    const RenderReadMe = () => {\n        var wi = window.open('', 'readme');\n\n\n\n        var texHead = '<link href = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" rel = \"stylesheet\"/> <link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100&family=Space+Mono&family=Syne&display=swap\" rel=\"stylesheet\" />'\n        var styles = '<link rel=\"stylesheet\" type=\"text/css\" href=\"ExportStyles.css\">'\n        wi.document.write('<html><head>')\n        wi.document.write(texHead + styles)\n        wi.document.write('</head>')\n        wi.document.write('<body>')\n        wi.document.write('<strong>COPY PASTE THIS INTO THE EDITOR AND PREVIEW TO VIEW</strong><pre>')\n\n        wi.document.write(readme)\n        wi.document.write('</pre></body></html>')\n        wi.document.close();\n    }\n\n    const ChangeCols = () => {\n\n        if (document.querySelector(\"#boxes-wrapper\")) {\n            document.getElementById(\"boxes-wrapper\").style.gridTemplateColumns = `repeat(${numCols}, 1fr)`;\n        }\n        setNumCols((numCols) % 7 + 1);\n\n    }\n    const ZenMode = () => {\n        if (showOutput) {\n            // document.getElementById(\"editor\").style.padding = isZenMode ? \"4em 20vw\" : \"1em 1em\";\n\n            // var elem = document.documentElement;\n            // if (isZenMode) {\n            //     if (elem.requestFullscreen) {\n            //         elem.requestFullscreen();\n            //     } else if (elem.webkitRequestFullscreen) { /* Safari */\n            //         elem.webkitRequestFullscreen();\n            //     } else if (elem.msRequestFullscreen) { /* IE11 */\n            //         elem.msRequestFullscreen();\n            //     }\n            // }\n            setZenMode(!isZenMode)\n        }\n    }\n    const FontToggle = () => {\n        setFontStyle((fontStyle + 1) % 2);\n        var fontString = \"\"\n        switch (fontStyle) {\n            case 0:\n                fontString = \"'Noto Sans JP', sans-serif\";\n\n                break;\n            case 1:\n                fontString = \"'Space Mono', monospace\";\n\n                break;\n            default:\n                fontString = \"'Space Mono', monospace\";\n\n                break;\n        }\n        document.getElementById(\"editor\").style.fontFamily = fontString;\n    }\n\n    const FontSizeToggle = () => {\n        setFontSize(fontSize + 1);\n        document.getElementById(\"editor\").style.fontSize = ((fontSize % 6) / 3 + 1).toString().concat(\"em\");\n    }\n\n    return (\n        <div className=\"App\" >\n            <Helmet>\n                <link\n                    href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"\n                    rel=\"stylesheet\"\n                />\n\n                <link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100&family=Space+Mono&family=Syne&display=swap\" rel=\"stylesheet\" />\n                <title>astronote(v.01)</title>\n            </Helmet>\n\n            <div className=\"container\">\n\n                {/* //! Note: The Inner Text is required to allow things */}\n                {showOutput &&\n                    <textarea className=\"body\" id=\"editor\" spellCheck=\"false\" onChange={ParseContent} defaultValue={content} >\n\n                    </textarea>\n                }\n                {!showOutput &&\n                    // <Viewer data={output} />\n                    <div className=\"boxes-wrapper\" id=\"boxes-wrapper\">\n                        {output}\n                    </div>\n                }\n\n                {/* Viewer Button Rack */}\n                {!showOutput &&\n                    <footer>\n                        <div className=\"footer-text\">\n                            zeronote v0.2\n                    </div>\n                        <div className=\"footer-button bg-bl2\" onClick={ChangeCols}>\n                            <p>++cols[{(numCols - 1) % 7 + 1}]</p>\n                        </div>\n\n                        <div className=\"footer-button bg-bl3\" onClick={RenderImage}>\n                            export\n                            </div>\n                        <div className=\"footer-button bg-bl4\" onClick={FlipShowOutput}>\n                            <p>editor</p>\n                        </div>\n                    </footer>\n\n                }\n\n                {/* Editor Button Rack */}\n                {showOutput &&\n                    <footer>\n                        <div className=\"footer-text\">\n                            zeronote v0.2\n                    </div>\n                        <div className=\"footer-button bg-bl1\" onClick={RenderReadMe}>\n                            <p>readme</p>\n                        </div>\n                        <div className=\"footer-button bg-bl2\" onClick={FontToggle}>\n                            <p>font-toggle</p>\n                        </div>\n                        <div className=\"footer-button bg-bl3\" onClick={FontSizeToggle}>\n                            <p>font-size</p>\n                        </div>\n                        <Download file=\"out.txt\" content={content}>\n                            <div className=\"footer-button bg-bl4\" >download-raw</div>\n                        </Download>\n                        <div className=\"footer-button bg-bl5\" onClick={FlipShowOutput}>\n                            <p>preview</p>\n                        </div>\n\n\n                    </footer>\n\n                }\n            </div>\n        </div >\n    );\n}\n\nexport default App;\n","C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\LatexRenderer.js",[],"C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\Viewer.js",[],"C:\\Users\\echo\\Documents\\Code\\React\\nocturnote\\nocturnote\\src\\Box.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":31,"nodeType":"37","messageId":"38","endLine":1,"endColumn":38},{"ruleId":"35","severity":1,"message":"39","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":56,"column":8,"nodeType":"42","endLine":56,"endColumn":17,"suggestions":"43"},{"ruleId":"35","severity":1,"message":"44","line":134,"column":11,"nodeType":"37","messageId":"38","endLine":134,"endColumn":20},{"ruleId":"35","severity":1,"message":"45","line":177,"column":11,"nodeType":"37","messageId":"38","endLine":177,"endColumn":18},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Viewer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'BoxPacker'. Either include it or remove the dependency array.","ArrayExpression",["48"],"'RenderTab' is assigned a value but never used.","'ZenMode' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [BoxPacker, content]",{"range":"51","text":"52"},[2736,2745],"[BoxPacker, content]"]